namespace KISS.FluentSqlBuilder.Composite;

/// <summary>
///     Interface for building and executing composite SQL queries with type-safe result processing.
///     Provides access to the SQL string, parameters, builder utilities, and expression variables
///     used during query construction and execution.
/// </summary>
public interface IComposite
{
    /// <summary>
    ///     The final SQL query string generated by the builder.
    /// </summary>
    string Sql { get; }

    /// <summary>
    ///     The dynamic parameters used for parameterized SQL queries.
    /// </summary>
    DynamicParameters Parameters { get; }

    /// <summary>
    ///     The StringBuilder instance used to accumulate SQL statements.
    /// </summary>
    StringBuilder SqlBuilder { get; }

    /// <summary>
    ///     The SQL formatter for custom string formatting and parameter handling.
    /// </summary>
    SqlFormatter SqlFormatting { get; }

    /// <summary>
    ///     Stores SQL clauses (SELECT, FROM, JOIN, etc.) in separate lists for query assembly.
    /// </summary>
    Dictionary<SqlStatement, List<string>> SqlStatements { get; }

    /// <summary>
    ///     Maps table types to their SQL aliases for consistent reference in queries.
    /// </summary>
    Dictionary<Type, string> TableAliases { get; }

    /// <summary>
    ///     The input entity type for the current query context.
    /// </summary>
    Type InEntityType { get; }

    /// <summary>
    ///     The output entity type for the current query context.
    /// </summary>
    Type OutEntityType { get; }

    /// <summary>
    ///     The output entities collection type for the current query context.
    /// </summary>
    Type OutEntitiesType { get; }

    /// <summary>
    ///     Expression parameter representing the input entries.
    /// </summary>
    ParameterExpression InEntriesExParameter { get; }

    /// <summary>
    ///     Expression variable for the input entries.
    /// </summary>
    ParameterExpression InEntriesExVariable { get; }

    /// <summary>
    ///     Expression variable used as an indexer in query expressions.
    /// </summary>
    ParameterExpression IndexerExVariable { get; }

    /// <summary>
    ///     Expression variable for the output entities.
    /// </summary>
    ParameterExpression OutEntitiesExVariable { get; }

    /// <summary>
    ///     Expression variable for the current entry in the query context.
    /// </summary>
    ParameterExpression CurrentEntryExVariable { get; }

    /// <summary>
    ///     Expression variable for the current entity in the query context.
    /// </summary>
    ParameterExpression CurrentEntityExVariable { get; }

    /// <summary>
    ///     List of join row expressions used in the query.
    /// </summary>
    List<Expression> JoinRows { get; }

    /// <summary>
    ///     The main block expression representing the query logic.
    /// </summary>
    BlockExpression Block { get; }

    /// <summary>
    ///     Retrieves or creates a table alias for the specified type.
    ///     Ensures consistent alias usage throughout query construction.
    /// </summary>
    /// <param name="type">The type for which to get or generate an alias.</param>
    /// <returns>The alias string associated with the specified type.</returns>
    string GetAliasMapping(Type type);
}
